<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Li Guangsheng</title>
    <link>http://liguangsheng.github.io/tags/python/</link>
    <description>Recent content in Python on Li Guangsheng</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Aug 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://liguangsheng.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python-GIL</title>
      <link>http://liguangsheng.github.io/post/python-gil/</link>
      <pubDate>Fri, 11 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://liguangsheng.github.io/post/python-gil/</guid>
      <description>GIL，全称是Global Interpreter Lock，全局解释器锁。GIL是CPython的一个设计，而不是python语言的特性。官方对GIL解释如下
 In CPython, the global interpreter lock, or GIL, is a mutex that prevents multiple native threads from executing Python bytecodes at once. This lock is necessary mainly because CPython’s memory management is not thread-safe. (However, since the GIL exists, other features have grown to depend on the guarantees that it enforces.)
在CPython中，GIL是用来防止多个线程同时执行python的字节码的，GIL存在的主要原因是CPython的内存管理器并非线程安全的。（然而，有了GIL后，很多其他特性的实现都依赖于GIL）
 在多线程编程中，后台确实有多个线程在同时运行，不过GIL的存在使得多个线程中只有一个线程在执行Python代码，其他线程需要等待GIL锁的释放才有机会执行。
GIL的好处在于，由于这把大锁的存在，python内的对象默认都是线程安全的，不必额外的再去手动加锁。在开发过程中省了很多事。
GIL的坏处在于，由于GIL的存在，是的多线程中实际上只有一个线程在执行python字节码，当一个线程执行的时候，其他的线程都在等待GIL的释放，并没有真正执行。再加上线程上下文切换花费的资源，实际上并不一定比单线程效率高。
释放GIL的条件是遇到IO操作或者字节码指令执行了一定的条数，所以对于IO密集的并发操作，Python的多线程还是有用的。</description>
    </item>
    
    <item>
      <title>Python参数传递pass by what?</title>
      <link>http://liguangsheng.github.io/post/python-pass-by-what/</link>
      <pubDate>Fri, 11 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://liguangsheng.github.io/post/python-pass-by-what/</guid>
      <description>参数的传递归根到底是赋值操作 以往说起参数传递时，通常都会谈到按值传递(pass by value)和按引用传递(pass by reference)，然而，这两种传递方式对Python来说好像都不准确。Python的参数传递方式有一种说法是pass by assignment，也就是赋值传递。
按值传递，一个外部变量a，如果a代表的是一个值，比如10，它被传递到函数的参数b中时，a的值被赋值到了b中。
按引用传递，一个外部变量a，如果a代表的是一个对象，那么a的值，也就是a中实际存储的是这个对象的引用，它被传递到函数的参数b中时，a的值被赋值到了b中，b也是这个对象的引用了。
也就是说，所谓按值传递和按引用传递都只是一个赋值操作。对于基本类型，或者说值类型，赋值操作会直接覆盖掉原来的值；对于引用类型，赋值操作会直接覆盖掉原来的地址，但是地址上的对象并不会有任何改变。
而在Python中，一切都是对象。所以Python中参数的传递都是传递的对象的引用。包括int，float等类型都是对象。所以，在下面这个例子中，change函数并不能改变a的数值。
In [1]: def change(v): ...: v = 42 ...: In [2]: a = 1 In [3]: change(a) In [4]: a Out[4]: 1  对象有可变对象和不可变对象之分 Python中一切都是对象，但对象是经过封装的，有可变对象和不可变对象之分。在刚才的例子中a的类型是int，int是一个不可变的类型。在函数change中对v进行赋值操作时，会生成一个新的对象，然后v中的地址变成了新对象的地址。
In [1]: def change(v): ...: v.append(42) ...: In [2]: l = [1, 2, 3] In [3]: id(l) Out[3]: 1888404847368 In [4]: change(l) In [5]: l Out[5]: [1, 2, 3, 42] In [6]: id(l) Out[6]: 1888404847368  在这个例子中，list是可变对象，调用v.</description>
    </item>
    
    <item>
      <title>pyenv管理Python版本</title>
      <link>http://liguangsheng.github.io/post/manage-python-version-with-pyenv/</link>
      <pubDate>Sun, 19 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://liguangsheng.github.io/post/manage-python-version-with-pyenv/</guid>
      <description>安装 curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash  添加以下语句到.bashrc并重新source。
export PATH=&amp;quot;/home/&amp;lt;user&amp;gt;/.pyenv/bin:$PATH&amp;quot; eval &amp;quot;$(pyenv init -)&amp;quot; eval &amp;quot;$(pyenv virtualenv-init -)&amp;quot;  运行一下pyenv update。
依赖 编译Python时需要一些依赖。 Ubuntu/Debian:
sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \ libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils  Fedora/CentOS/RHEL: FIXME: you may need to install xz to build some CPython version
yum install zlib-devel bzip2 bzip2-devel readline-devel sqlite sqlite-devel openssl-devel  Mac OS X:</description>
    </item>
    
  </channel>
</rss>